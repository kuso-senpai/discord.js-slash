'use strict';

const Base = require("./Base");
const SlashCommandOption = require("./SlashCommandOption")

class SlashCommand extends Base {
    constructor(client, name, description, options = [], data = undefined, onCall) {
        super(client);
        
        this.name = name
        this.description = description
        this.options = options
        this.onCall = onCall

        if(data)
            this._patch(data)

        this.register = () => {
            return new Promise(async (resolve, reject) => {
                let commandData = {
                    name: this.name,
                    description: this.description
                }
                if(options)
                    commandData.options = this.options


                this._patch(await client.api.applications(this.client.user.id).commands.post({data: commandData}))
                client.slashCommands.add(this)
                resolve()
            })
        }

        this.delete = () => {
            return new Promise(async (resolve, reject) => {
                await client.api.applications(this.client.user.id).commands(this.id).delete()
                resolve()
            })
        }

        client.ws.on('INTERACTION_CREATE', async interaction => {
            const commandName = interaction.data.name.toLowerCase();
            const args = interaction.data.options
            
            if (commandName === this.name){
                try { 
                    this.interaction = interaction;
                    if (this.onCall) this.onCall(this, interaction, args, 
                        { channel: this.client.channels.cache.find(x => x.id == interaction.channel_id), guild: this.client.guilds.cache.find(x => x.id == interaction.guild_id), author: this.client.guilds.cache.find(x => x.id == interaction.guild_id).members.cache.find(x => x.id == interaction.member.id) } )
                }
                catch(ex) { console.log(ex) }
            }
        });

        //new WebhookClient(client.user.id, this.token).send('hello world')
    }
    _patch(data) {
        this.id = data.id
        this.appliaction_id = data.application_id
        this.version = data.version
    }

    reply(content, hide = false) {
        return new Promise(resolve => {
            if (hide) {
                this.client.api.webhooks(this.appliaction_id, this.interaction.token).post({
                    data: {
                        type: 4,
                        data: {
                            content: content
                        }
                    }
                })
            }

            this.client.api.interactions(this.interaction.id, this.interaction.token).callback.post({
                data: {
                    type: 4,
                    data: {
                        content: content
                    }
                }
            })
            resolve()
        })
    }
}


module.exports = SlashCommand